<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CefSharp.OffScreen</name>
    </assembly>
    <members>
        <member name="T:CefSharp.OffScreen.BitmapFactory">
            <summary>
            BitmapFactory.
            </summary>
            <seealso cref="T:CefSharp.IBitmapFactory"/>
        </member>
        <member name="F:CefSharp.OffScreen.BitmapFactory.bitmapLock">
            <summary>
            The bitmap lock
            </summary>
        </member>
        <member name="M:CefSharp.OffScreen.BitmapFactory.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CefSharp.OffScreen.BitmapFactory"/> class.
            </summary>
            <param name="lockObject">The lock object.</param>
        </member>
        <member name="M:CefSharp.OffScreen.BitmapFactory.CefSharp#IBitmapFactory#CreateBitmap(System.Boolean,System.Double)">
            <summary>
            Create an instance of BitmapInfo based on the params
            </summary>
            <param name="isPopup">create bitmap info for a popup (typically just a bool flag used internally)</param>
            <param name="dpiScale">DPI scale</param>
            <returns>newly created BitmapInfo</returns>
        </member>
        <member name="T:CefSharp.OffScreen.ChromiumWebBrowser">
            <summary>
            An offscreen instance of Chromium that you can use to take
            snapshots or evaluate JavaScript.
            </summary>
            <seealso cref="T:CefSharp.Internals.IRenderWebBrowser"/>
        </member>
        <member name="F:CefSharp.OffScreen.ChromiumWebBrowser.managedCefBrowserAdapter">
            <summary>
            The managed cef browser adapter
            </summary>
        </member>
        <member name="F:CefSharp.OffScreen.ChromiumWebBrowser.BitmapLock">
            <summary>
            Need a lock because the caller may be asking for the bitmap
            while Chromium async rendering has returned on another thread.
            </summary>
        </member>
        <member name="F:CefSharp.OffScreen.ChromiumWebBrowser.size">
            <summary>
            Size of the Chromium viewport.
            This must be set to something other than 0x0 otherwise Chromium will not render,
            and the ScreenshotAsync task will deadlock.
            </summary>
        </member>
        <member name="F:CefSharp.OffScreen.ChromiumWebBrowser.browser">
            <summary>
            The browser
            </summary>
        </member>
        <member name="F:CefSharp.OffScreen.ChromiumWebBrowser.browserCreated">
            <summary>
            Flag to guard the creation of the underlying offscreen browser - only one instance can be created
            </summary>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.#ctor(System.String,CefSharp.BrowserSettings,CefSharp.RequestContext,System.Boolean)">
            <summary>
            Create a new OffScreen Chromium Browser
            </summary>
            <param name="address">Initial address (url) to load</param>
            <param name="browserSettings">The browser settings to use. If null, the default settings are used.</param>
            <param name="requestContext">See <see cref="P:CefSharp.OffScreen.ChromiumWebBrowser.RequestContext"/> for more details. Defaults to null</param>
            <param name="automaticallyCreateBrowser">automatically create the underlying Browser</param>
            <exception cref="T:System.InvalidOperationException">Cef::Initialize() failed</exception>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:CefSharp.OffScreen.ChromiumWebBrowser"/> class.
            </summary>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CreateBrowser(System.IntPtr)">
            <summary>
            Create the underlying browser. The instance address, browser settings and request context will be used.
            </summary>
            <param name="windowHandle">Window handle if any, IntPtr.Zero is the default</param>
            <exception cref="T:System.Exception">An instance of the underlying offscreen browser has already been created, this method can only be called once.</exception>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.ScreenshotOrNull">
            <summary>
            Immediately returns a copy of the last rendering from Chrome,
            or null if no rendering has occurred yet.
            Chrome also renders the page loading, so if you want to see a complete rendering,
            only start this task once your page is loaded (which you can detect via FrameLoadEnd
            or your own heuristics based on evaluating JavaScript).
            It is your responsibility to dispose the returned Bitmap.
            The bitmap size is determined by the Size property set earlier.
            </summary>
            <returns>Bitmap.</returns>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.ScreenshotAsync(System.Boolean)">
            <summary>
            Starts a task that waits for the next rendering from Chrome.
            Chrome also renders the page loading, so if you want to see a complete rendering,
            only start this task once your page is loaded (which you can detect via FrameLoadEnd
            or your own heuristics based on evaluating JavaScript).
            It is your responsibility to dispose the returned Bitmap.
            The bitmap size is determined by the Size property set earlier.
            </summary>
            <param name="ignoreExistingScreenshot">Ignore existing bitmap (if any) and return the next avaliable bitmap</param>
            <returns>Task&lt;Bitmap&gt;.</returns>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.Load(System.String)">
            <summary>
            Loads the specified URL.
            </summary>
            <param name="url">The URL to be loaded.</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.RegisterJsObject(System.String,System.Object,System.Boolean)">
            <summary>
            Registers a Javascript object in this specific browser instance.
            </summary>
            <param name="name">The name of the object. (e.g. "foo", if you want the object to be accessible as window.foo).</param>
            <param name="objectToBind">The object to be made accessible to Javascript.</param>
            <param name="camelCaseJavascriptNames">camel case the javascript names of properties/methods, defaults to true</param>
            <exception cref="T:System.Exception">Browser is already initialized. RegisterJsObject must be +
                                                called before the underlying CEF browser is created.</exception>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.RegisterAsyncJsObject(System.String,System.Object,System.Boolean)">
            <summary>
            <para>Asynchronously registers a Javascript object in this specific browser instance.</para>
            <para>Only methods of the object will be availabe.</para>
            </summary>
            <param name="name">The name of the object. (e.g. "foo", if you want the object to be accessible as window.foo).</param>
            <param name="objectToBind">The object to be made accessible to Javascript.</param>
            <param name="camelCaseJavascriptNames">camel case the javascript names of methods, defaults to true</param>
            <exception cref="T:System.Exception">Browser is already initialized. RegisterJsObject must be +
                                                called before the underlying CEF browser is created.</exception>
            <remarks>The registered methods can only be called in an async way, they will all return immeditaly and the resulting
            object will be a standard javascript Promise object which is usable to wait for completion or failure.</remarks>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#IWebBrowser#Focus">
            <summary>
            Has Focus - Always False
            </summary>
            <returns>returns false</returns>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.GetBrowser">
            <summary>
            Returns the current CEF Browser Instance
            </summary>
            <returns>browser instance or null</returns>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IRenderWebBrowser#GetScreenInfo">
            <summary>
            Gets the screen information.
            </summary>
            <returns>ScreenInfo.</returns>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IRenderWebBrowser#GetViewRect">
            <summary>
            Gets the view rect.
            </summary>
            <returns>ViewRect.</returns>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IRenderWebBrowser#CreateBitmapInfo(System.Boolean)">
            <summary>
            Creates the bitmap information.
            </summary>
            <param name="isPopup">if set to <c>true</c> [is popup].</param>
            <returns>BitmapInfo.</returns>
            <exception cref="T:System.Exception">BitmapFactory cannot be null</exception>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IRenderWebBrowser#InvokeRenderAsync(CefSharp.Internals.BitmapInfo)">
            <summary>
            Invoked from CefRenderHandler.OnPaint
            A new <see cref="P:CefSharp.OffScreen.ChromiumWebBrowser.Bitmap"/> is only created when <see cref="P:CefSharp.Internals.BitmapInfo.CreateNewBitmap"/>
            is true, otherwise the new buffer is simply copied into the backBuffer of the existing
            <see cref="P:CefSharp.OffScreen.ChromiumWebBrowser.Bitmap"/> for efficiency. Locking provided by OnPaint as this method is called
            in it's lock scope.
            </summary>
            <param name="bitmapInfo">information about the bitmap to be rendered</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.InvokeRenderAsync(CefSharp.Internals.BitmapInfo)">
            <summary>
            Invoked from CefRenderHandler.OnPaint
            A new <see cref="P:CefSharp.OffScreen.ChromiumWebBrowser.Bitmap"/> is only created when <see cref="P:CefSharp.Internals.BitmapInfo.CreateNewBitmap"/>
            is true, otherwise the new buffer is simply copied into the backBuffer of the existing
            <see cref="P:CefSharp.OffScreen.ChromiumWebBrowser.Bitmap"/> for efficiency. Locking provided by OnPaint as this method is called
            in it's lock scope.
            </summary>
            <param name="bitmapInfo">information about the bitmap to be rendered</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IRenderWebBrowser#SetCursor(System.IntPtr,CefSharp.CefCursorType)">
            <summary>
            Sets the cursor.
            </summary>
            <param name="handle">The handle.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IRenderWebBrowser#StartDragging(CefSharp.IDragData,CefSharp.DragOperationsMask,System.Int32,System.Int32)">
            <summary>
            Starts the dragging.
            </summary>
            <param name="dragData">The drag data.</param>
            <param name="mask">The mask.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IRenderWebBrowser#SetPopupIsOpen(System.Boolean)">
            <summary>
            Sets the popup is open.
            </summary>
            <param name="show">if set to <c>true</c> [show].</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IRenderWebBrowser#SetPopupSizeAndPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the popup size and position.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IWebBrowserInternal#OnConsoleMessage(CefSharp.ConsoleMessageEventArgs)">
            <summary>
            Handles the <see cref="E:ConsoleMessage"/> event.
            </summary>
            <param name="args">The <see cref="T:CefSharp.ConsoleMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IWebBrowserInternal#OnFrameLoadStart(CefSharp.FrameLoadStartEventArgs)">
            <summary>
            Handles the <see cref="E:FrameLoadStart"/> event.
            </summary>
            <param name="args">The <see cref="T:CefSharp.FrameLoadStartEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IWebBrowserInternal#OnFrameLoadEnd(CefSharp.FrameLoadEndEventArgs)">
            <summary>
            Handles the <see cref="E:FrameLoadEnd"/> event.
            </summary>
            <param name="args">The <see cref="T:CefSharp.FrameLoadEndEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IWebBrowserInternal#OnAfterBrowserCreated(CefSharp.IBrowser)">
            <summary>
            Called when [after browser created].
            </summary>
            <param name="browser">The browser.</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IWebBrowserInternal#OnLoadError(CefSharp.LoadErrorEventArgs)">
            <summary>
            Handles the <see cref="E:LoadError"/> event.
            </summary>
            <param name="args">The <see cref="T:CefSharp.LoadErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IWebBrowserInternal#OnStatusMessage(CefSharp.StatusMessageEventArgs)">
            <summary>
            Handles the <see cref="E:StatusMessage"/> event.
            </summary>
            <param name="args">The <see cref="T:CefSharp.StatusMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IWebBrowserInternal#SetAddress(CefSharp.AddressChangedEventArgs)">
            <summary>
            Sets the address.
            </summary>
            <param name="args">The <see cref="T:CefSharp.AddressChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IWebBrowserInternal#SetLoadingStateChange(CefSharp.LoadingStateChangedEventArgs)">
            <summary>
            Sets the loading state change.
            </summary>
            <param name="args">The <see cref="T:CefSharp.LoadingStateChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IWebBrowserInternal#SetTitle(CefSharp.TitleChangedEventArgs)">
            <summary>
            Sets the title.
            </summary>
            <param name="args">The <see cref="T:CefSharp.TitleChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IWebBrowserInternal#SetTooltipText(System.String)">
            <summary>
            Sets the tooltip text.
            </summary>
            <param name="tooltipText">The tooltip text.</param>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.Bitmap">
            <summary>
            Contains the last rendering from Chromium. Direct access
            to the underlying Bitmap - there is no locking when trying
            to access directly, use <see cref="F:CefSharp.OffScreen.ChromiumWebBrowser.BitmapLock"/> where appropriate.
            A new bitmap is only created when it's size changes, otherwise
            the back buffer for the bitmap is constantly updated.
            Read the <see cref="M:CefSharp.OffScreen.ChromiumWebBrowser.InvokeRenderAsync(CefSharp.Internals.BitmapInfo)"/> doco for more info.
            </summary>
            <value>The bitmap.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.IsBrowserInitialized">
            <summary>
            A flag that indicates whether the WebBrowser is initialized (true) or not (false).
            </summary>
            <value><c>true</c> if this instance is browser initialized; otherwise, <c>false</c>.</value>
            <remarks>In the WPF control, this property is implemented as a Dependency Property and fully supports data
            binding.</remarks>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.IsLoading">
            <summary>
            A flag that indicates whether the control is currently loading one or more web pages (true) or not (false).
            </summary>
            <value><c>true</c> if this instance is loading; otherwise, <c>false</c>.</value>
            <remarks>In the WPF control, this property is implemented as a Dependency Property and fully supports data
            binding.</remarks>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.TooltipText">
            <summary>
            The text that will be displayed as a ToolTip
            </summary>
            <value>The tooltip text.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.Address">
            <summary>
            The address (URL) which the browser control is currently displaying.
            Will automatically be updated as the user navigates to another page (e.g. by clicking on a link).
            </summary>
            <value>The address.</value>
            <remarks>In the WPF control, this property is implemented as a Dependency Property and fully supports data
            binding.</remarks>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.CanGoBack">
            <summary>
            A flag that indicates whether the state of the control current supports the GoBack action (true) or not (false).
            </summary>
            <value><c>true</c> if this instance can go back; otherwise, <c>false</c>.</value>
            <remarks>In the WPF control, this property is implemented as a Dependency Property and fully supports data
            binding.</remarks>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.CanGoForward">
            <summary>
            A flag that indicates whether the state of the control currently supports the GoForward action (true) or not (false).
            </summary>
            <value><c>true</c> if this instance can go forward; otherwise, <c>false</c>.</value>
            <remarks>In the WPF control, this property is implemented as a Dependency Property and fully supports data
            binding.</remarks>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.BrowserSettings">
            <summary>
            Gets the browser settings.
            </summary>
            <value>The browser settings.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.RequestContext">
            <summary>
            Gets the request context.
            </summary>
            <value>The request context.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.JsDialogHandler">
            <summary>
            Implement <see cref="T:CefSharp.IJsDialogHandler"/> and assign to handle events related to JavaScript Dialogs.
            </summary>
            <value>The js dialog handler.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.DialogHandler">
            <summary>
            Implement <see cref="T:CefSharp.IDialogHandler"/> and assign to handle dialog events.
            </summary>
            <value>The dialog handler.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.DownloadHandler">
            <summary>
            Implement <see cref="T:CefSharp.IDownloadHandler"/> and assign to handle events related to downloading files.
            </summary>
            <value>The download handler.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.KeyboardHandler">
            <summary>
            Implement <see cref="T:CefSharp.IKeyboardHandler"/> and assign to handle events related to key press.
            </summary>
            <value>The keyboard handler.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.LoadHandler">
            <summary>
            Implement <see cref="T:CefSharp.ILoadHandler"/> and assign to handle events related to browser load status.
            </summary>
            <value>The load handler.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.LifeSpanHandler">
            <summary>
            Implement <see cref="T:CefSharp.ILifeSpanHandler"/> and assign to handle events related to popups.
            </summary>
            <value>The life span handler.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.DisplayHandler">
            <summary>
            Implement <see cref="T:CefSharp.IDisplayHandler"/> and assign to handle events related to browser display state.
            </summary>
            <value>The display handler.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.MenuHandler">
            <summary>
            Implement <see cref="T:CefSharp.IContextMenuHandler"/> and assign to handle events related to the browser context menu
            </summary>
            <value>The menu handler.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.FocusHandler">
            <summary>
            Implement <see cref="T:CefSharp.IFocusHandler"/> and assign to handle events related to the browser component's focus
            </summary>
            <value>The focus handler.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.RequestHandler">
            <summary>
            Implement <see cref="T:CefSharp.IRequestHandler"/> and assign to handle events related to browser requests.
            </summary>
            <value>The request handler.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.DragHandler">
            <summary>
            Implement <see cref="T:CefSharp.IDragHandler"/> and assign to handle events related to dragging.
            </summary>
            <value>The drag handler.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.ResourceHandlerFactory">
            <summary>
            Implement <see cref="T:CefSharp.IResourceHandlerFactory"/> and control the loading of resources
            </summary>
            <value>The resource handler factory.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.GeolocationHandler">
            <summary>
            Implement <see cref="T:CefSharp.IGeolocationHandler"/> and assign to handle requests for permission to use geolocation.
            </summary>
            <value>The geolocation handler.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.BitmapFactory">
            <summary>
            Gets or sets the bitmap factory.
            </summary>
            <value>The bitmap factory.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.RenderProcessMessageHandler">
            <summary>
            Implement <see cref="T:CefSharp.IRenderProcessMessageHandler"/> and assign to handle messages from the render process.
            </summary>
            <value>The render process message handler.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.FindHandler">
            <summary>
            Implement <see cref="T:CefSharp.IFindHandler"/> to handle events related to find results.
            </summary>
            <value>The find handler.</value>
        </member>
        <member name="E:CefSharp.OffScreen.ChromiumWebBrowser.LoadError">
            <summary>
            Event handler that will get called when the resource load for a navigation fails or is canceled.
            It's important to note this event is fired on a CEF UI thread, which by default is not the same as your application UI
            thread. It is unwise to block on this thread for any length of time as your browser will become unresponsive and/or hang..
            To access UI elements you'll need to Invoke/Dispatch onto the UI Thread.
            </summary>
        </member>
        <member name="E:CefSharp.OffScreen.ChromiumWebBrowser.FrameLoadStart">
            <summary>
            Event handler that will get called when the browser begins loading a frame. Multiple frames may be loading at the same
            time. Sub-frames may start or continue loading after the main frame load has ended. This method may not be called for a
            particular frame if the load request for that frame fails. For notification of overall browser load status use
            OnLoadingStateChange instead.
            It's important to note this event is fired on a CEF UI thread, which by default is not the same as your application UI
            thread. It is unwise to block on this thread for any length of time as your browser will become unresponsive and/or hang..
            To access UI elements you'll need to Invoke/Dispatch onto the UI Thread.
            </summary>
            <remarks>Whilst this may seem like a logical place to execute js, it's called before the DOM has been loaded, implement
            <see cref="M:CefSharp.IRenderProcessMessageHandler.OnContextCreated(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame)"/> as it's called when the underlying V8Context is created
            (Only called for the main frame at this stage)</remarks>
        </member>
        <member name="E:CefSharp.OffScreen.ChromiumWebBrowser.FrameLoadEnd">
            <summary>
            Event handler that will get called when the browser is done loading a frame. Multiple frames may be loading at the same
            time. Sub-frames may start or continue loading after the main frame load has ended. This method will always be called
            for all frames irrespective of whether the request completes successfully.
            It's important to note this event is fired on a CEF UI thread, which by default is not the same as your application UI
            thread. It is unwise to block on this thread for any length of time as your browser will become unresponsive and/or hang..
            To access UI elements you'll need to Invoke/Dispatch onto the UI Thread.
            </summary>
        </member>
        <member name="E:CefSharp.OffScreen.ChromiumWebBrowser.ConsoleMessage">
            <summary>
            Event handler for receiving Javascript console messages being sent from web pages.
            It's important to note this event is fired on a CEF UI thread, which by default is not the same as your application UI
            thread. It is unwise to block on this thread for any length of time as your browser will become unresponsive and/or hang..
            To access UI elements you'll need to Invoke/Dispatch onto the UI Thread.
            (The exception to this is when your running with settings.MultiThreadedMessageLoop = false, then they'll be the same thread).
            </summary>
        </member>
        <member name="E:CefSharp.OffScreen.ChromiumWebBrowser.BrowserInitialized">
            <summary>
            Occurs when [browser initialized].
            It's important to note this event is fired on a CEF UI thread, which by default is not the same as your application UI
            thread. It is unwise to block on this thread for any length of time as your browser will become unresponsive and/or hang..
            To access UI elements you'll need to Invoke/Dispatch onto the UI Thread.
            (The exception to this is when your running with settings.MultiThreadedMessageLoop = false, then they'll be the same thread).
            </summary>
        </member>
        <member name="E:CefSharp.OffScreen.ChromiumWebBrowser.StatusMessage">
            <summary>
            Event handler for changes to the status message.
            It's important to note this event is fired on a CEF UI thread, which by default is not the same as your application UI
            thread. It is unwise to block on this thread for any length of time as your browser will become unresponsive and/or hang.
            To access UI elements you'll need to Invoke/Dispatch onto the UI Thread.
            (The exception to this is when your running with settings.MultiThreadedMessageLoop = false, then they'll be the same thread).
            </summary>
        </member>
        <member name="E:CefSharp.OffScreen.ChromiumWebBrowser.LoadingStateChanged">
            <summary>
            Event handler that will get called when the Loading state has changed.
            This event will be fired twice. Once when loading is initiated either programmatically or
            by user action, and once when loading is terminated due to completion, cancellation of failure.
            It's important to note this event is fired on a CEF UI thread, which by default is not the same as your application UI
            thread. It is unwise to block on this thread for any length of time as your browser will become unresponsive and/or hang..
            To access UI elements you'll need to Invoke/Dispatch onto the UI Thread.
            </summary>
        </member>
        <member name="E:CefSharp.OffScreen.ChromiumWebBrowser.AddressChanged">
            <summary>
            Occurs when [address changed].
            It's important to note this event is fired on a CEF UI thread, which by default is not the same as your application UI
            thread. It is unwise to block on this thread for any length of time as your browser will become unresponsive and/or hang..
            To access UI elements you'll need to Invoke/Dispatch onto the UI Thread.
            (The exception to this is when your running with settings.MultiThreadedMessageLoop = false, then they'll be the same thread).
            </summary>
        </member>
        <member name="E:CefSharp.OffScreen.ChromiumWebBrowser.TitleChanged">
            <summary>
            Occurs when [title changed].
            It's important to note this event is fired on a CEF UI thread, which by default is not the same as your application UI
            thread. It is unwise to block on this thread for any length of time as your browser will become unresponsive and/or hang..
            To access UI elements you'll need to Invoke/Dispatch onto the UI Thread.
            (The exception to this is when your running with settings.MultiThreadedMessageLoop = false, then they'll be the same thread).
            </summary>
        </member>
        <member name="E:CefSharp.OffScreen.ChromiumWebBrowser.NewScreenshot">
            <summary>
            Fired by a separate thread when Chrome has re-rendered.
            This means that a Bitmap will be returned by ScreenshotOrNull().
            </summary>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.Size">
            <summary>
            Get/set the size of the Chromium viewport, in pixels.
            This also changes the size of the next screenshot.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IWebBrowserInternal#BrowserAdapter">
            <summary>
            Gets the browser adapter.
            </summary>
            <value>The browser adapter.</value>
        </member>
        <member name="P:CefSharp.OffScreen.ChromiumWebBrowser.CefSharp#Internals#IWebBrowserInternal#HasParent">
            <summary>
            Gets or sets a value indicating whether this instance has parent.
            </summary>
            <value><c>true</c> if this instance has parent; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CefSharp.OffScreen.GdiBitmapInfo">
            <summary>
            Uses GdiBitmap to render the backbuffer.
            </summary>
            <seealso cref="T:CefSharp.Internals.BitmapInfo"/>
        </member>
        <member name="F:CefSharp.OffScreen.GdiBitmapInfo.bitmap">
            <summary>
            The bitmap
            </summary>
        </member>
        <member name="F:CefSharp.OffScreen.GdiBitmapInfo.createNewBitmap">
            <summary>
            The create new bitmap
            </summary>
        </member>
        <member name="M:CefSharp.OffScreen.GdiBitmapInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CefSharp.OffScreen.GdiBitmapInfo"/> class.
            </summary>
        </member>
        <member name="M:CefSharp.OffScreen.GdiBitmapInfo.ClearBitmap">
            <summary>
            Clears the bitmap.
            </summary>
        </member>
        <member name="M:CefSharp.OffScreen.GdiBitmapInfo.CreateBitmap">
            <summary>
            Creates the bitmap.
            </summary>
            <returns>Bitmap.</returns>
        </member>
        <member name="P:CefSharp.OffScreen.GdiBitmapInfo.CreateNewBitmap">
            <summary>
            Gets a value indicating whether [create new bitmap].
            </summary>
            <value><c>true</c> if [create new bitmap]; otherwise, <c>false</c>.</value>
        </member>
    </members>
</doc>
